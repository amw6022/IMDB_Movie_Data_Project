{
    "collab_server" : "",
    "contents" : "#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\n# Tara's changes - take 3.\n\nlibrary(stat297)\nlibrary(shiny)\nlibrary(DT)\n\naxis_vars <- c(\n  \"Duration (by minute)\" = \"length\",\n  \"Year Produced\" = \"timeline\",\n  \"Gross Income\" = \"gross\"\n)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n  # Application title\n  titlePanel(\"Movie Picking Tool (Prototype)\"),\n\n  # Sidebar with a slider input for number of bins\n  sidebarLayout(\n    sidebarPanel(\n      checkboxInput('header', 'Header', TRUE),\n      textInput(\"title\", \"Movie Name:\",\"\"),\n      checkboxGroupInput(\"genres\",\"Genres\", choices = list(\"Action\" = 1, \"Adventure\" = 2,\n                                                           \"Animation\" = 3, \"Drama\" = 4, \"Family\" = 5, \"Sci-Fi\" = 6, \"Crime\" = 7, \"Comedy\" = 8,\n                                                           \"Fantasy\" = 9, \"Biography\" = 10, \"Mystery\" = 11, \"Romance\" = 12, \"Thriller\" = 13, \"War\" = 14,\n                                                           \"Horror\" = 15, \"History\" = 16, \"Musical\" = 17, \"Western\" = 18, \"Sport\" = 19, \"Music\" = 20, \"Documentary\" = 21)\n                         ,selected = 1),\n      sliderInput(\"length\",\n                  \"Duration (by minute)\",\n                  min = 7,\n                  max = 511,\n                  value = 300),\n      checkboxGroupInput(\"rate\", \"Viewer Rating\", choices = list(\"G\" = 1, \"PG\" = 2,\n                                                                 \"PG-13\" = 3, \"R\" = 4, \"TV-MA\" = 5, \"TV-14\" = 6, \"Not Rated\" = 7, \"Unrated\" = 8, \"Approved\" = 9,\n                                                                 \"TV-Y7\" = 10, \"GP\" = 11, \"NC-17\" = 12, \"Passed\" = 13, \"TV-G\" = 14, \"TV-PG\" = 15, \"TV-Y\" = 16,\n                                                                 \"X\" = 17)),\n      sliderInput(\"timeline\", \"Year Produced\",\n                  min = 1950,\n                  max = 2020,\n                  value = 1980),\n      textInput(\"direct\", \"Director Name:\", value = \"\", width = NULL, placeholder = \"Steven Spielberg\"),\n      textInput(\"actor\", \"Actor Name:\", value = \"\", width = NULL, placeholder = \"Jim Carrey\"),\n      sliderInput(\"gross\", \"Gross Income:\",\n                  min = 150,\n                  max = 800000000,\n                  value = c(250000000, 500000000)),\n      selectInput(\"xvar\", \"X-axis variable\", axis_vars, selected = \"Meter\"),\n      selectInput(\"yvar\", \"Y-axis variable\", axis_vars, selected = \"Reviews\"),\n      tags$small(paste0(\n        \"Optional: User may upload their own CSV file containing movie data. \"\n      )),\n      fileInput('file1', 'Choose CSV File', multiple = TRUE,\n                accept=c('text/csv',\n                         'text/comma-separated-values,text/plain',\n                         '.csv'))\n    ),\n\n    # Show a plot of the generated distribution\n    mainPanel(\n      DT::dataTableOutput(\"contents\")\n      # plotOutput(\"Plot\", width = \"100%\", height = \"400px\", click = NULL,\n      # dblclick = NULL, hover = NULL, hoverDelay = NULL,\n      # hoverDelayType = NULL, brush = NULL, clickId = NULL, hoverId = NULL,\n      # inline = FALSE)\n    )\n  )\n)\n\n# -------server function------------------------------------------------------------------------------------------------\n\n# Define server logic required to draw a histogram\nserver <- shinyServer(function(input, output,session){\n\n  data <- reactive({\n\n    inFile <- input$file1\n\n    if (is.null(inFile)) {\n      # Read movie_data\n      movie_data <- read.csv(\"C:\\\\Users\\\\tarap\\\\Documents\\\\Academics\\\\SEMESTER 7\\\\STAT 297\\\\group4_project\\\\movie_metadata.csv\")\n      movies <- data.frame(movie_data$movie_title, movie_data$duration, movie_data$genres, movie_data$country,\n                           movie_data$content_rating, movie_data$gross, movie_data$plot_keywords, movie_data$title_year,\n                           movie_data$budget, movie_data$movie_facebook_likes, movie_data$director_name, movie_data$director_facebook_likes,\n                           movie_data$actor_1_name, movie_data$actor_2_name, movie_data$actor_3_name, movie_data$cast_total_facebook_likes,\n                           movie_data$num_voted_users, movie_data$num_user_for_reviews, movie_data$num_critic_for_reviews, movie_data$imdb_score,\n                           movie_data$movie_imdb_link)\n\n    } else {\n      # Read user csv input data\n      inFile <- input$file1\n      movie_data <- read.csv(inFile$datapath, header = input$header, sep = input$sep,\n                             quote = input$quote)\n      movies <- data.frame(movie_data$movie_title, movie_data$duration, movie_data$genres, movie_data$country,\n                           movie_data$content_rating, movie_data$gross, movie_data$plot_keywords, movie_data$title_year,\n                           movie_data$budget, movie_data$movie_facebook_likes, movie_data$director_name, movie_data$director_facebook_likes,\n                           movie_data$actor_1_name, movie_data$actor_2_name, movie_data$actor_3_name, movie_data$cast_total_facebook_likes,\n                           movie_data$num_voted_users, movie_data$num_user_for_reviews, movie_data$num_critic_for_reviews, movie_data$imdb_score,\n                           movie_data$movie_imdb_link)\n    }\n\n    # Update inputs (you could create an observer with both updateSel...)\n    # You can also constraint your choices. If you wanted select only numeric\n    # variables you could set \"choices = sapply(df, is.numeric)\"\n    # It depends on what you want to do later on.\n\n    # \"Empty inputs\" - they will be updated after the data is uploaded\n\n    updateSelectInput(session, inputId = 'xcol', label = 'X Variable',\n                      choices = names(movie_data), selected = names(movie_data))\n    updateSelectInput(session, inputId = 'ycol', label = 'Y Variable',\n                      choices = names(movie_data), selected = names(movie_data)[2])\n\n    return(movie_data)\n\n\n    # Define side panel categories\n    # categories <- names(movie_data)\n\n    # output$Plot <- renderPlot({\n\n    # plot(movie_data$genres, movie_data$duration)\n\n  })\n\n  output$contents <- renderDataTable({\n    data()\n  })\n\n})\n\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1512581180474.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1258761246",
    "id" : "DAFF6788",
    "lastKnownWriteTime" : 1512665651,
    "last_content_update" : 1512665651,
    "path" : "~/Documents/Spring semester 2017/Fall Semester 2017/group4_project/shinyapp_changes_tp.R",
    "project_path" : "shinyapp_changes_tp.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}